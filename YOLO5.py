# -*- coding: utf-8 -*-
"""Tomato Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11PsBEWM4QI5-gtq2RKfpg8FBeXbOssn-
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.environ['KAGGLE_CONFIG_DIR'] = "/content/drive/MyDrive/Kaggle"

import torch
from IPython.display import Image, clear_output   

#clear_output()
print('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))

# Commented out IPython magic to ensure Python compatibility.
#changing the working directory
# %cd /content/drive/MyDrive/Kaggle/Tomato

# Commented out IPython magic to ensure Python compatibility.
# %cd ./yolov5/

# !kaggle datasets download -d andrewmvd/tomato-detection

# #unzipping the zip files and deleting the zip files
# !unzip \*.zip  && rm *.zip

# Tesla p100 is the fastest gpu available and then Tesla T4 
!nvidia-smi

!git clone https://github.com/ultralytics/yolov5

!pip install -r yolov5/requirements.txt
# clear_output()

# # For split data

# pip install split-folders
# input_folder = '/content/drive/MyDrive/Kaggle/Tomato/Data/AllData/'
# import splitfolders
# splitfolders.ratio(input_folder, output = '/content/drive/MyDrive/Kaggle/Tomato/Data/TomatoData',
#                    ratio = (.7, .2, .1),
#                    group_prefix = None)

# Commented out IPython magic to ensure Python compatibility.
# %cat Data/data.yaml

# define number of classes based on YAML
import yaml
with open("Data/data.yaml", 'r') as stream:
    num_classes = str(yaml.safe_load(stream)['nc'])
print(num_classes)

"""# Yolov5s"""

# Commented out IPython magic to ensure Python compatibility.
# %cat yolov5/models/yolov5s.yaml

#customize iPython writefile so we can write variables
from IPython.core.magic import register_line_cell_magic

@register_line_cell_magic
def writetemplate(line, cell):
    with open(line, 'w') as f:
        f.write(cell.format(**globals()))

# Commented out IPython magic to ensure Python compatibility.
# %%writetemplate yolov5/models/yolov5s.yaml
# 
# # parameters
# nc: 1  # number of classes
# depth_multiple: 0.33  # model depth multiple
# width_multiple: 0.50 # layer channel multiple
# 
# # anchors
# anchors:
#   - [10,13, 16,30, 33,23]  # P3/8
#   - [30,61, 62,45, 59,119]  # P4/16
#   - [116,90, 156,198, 373,326]  # P5/32
# 
# # YOLOv5 backbone
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Focus, [64, 3]],  # 0-P1/2
#    [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#    [-1, 3, C3, [128]],
#    [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#    [-1, 9, C3, [256]],
#    [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#    [-1, 9, C3, [512]],
#    [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#    [-1, 1, SPP, [1024, [5, 9, 13]]],
#    [-1, 3, C3, [1024, False]],  # 9
#   ]
# 
# # YOLOv5 head
# head:
#   [[-1, 1, Conv, [512, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 6], 1, Concat, [1]],  # cat backbone P4
#    [-1, 3, C3, [512, False]],  # 13
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 4], 1, Concat, [1]],  # cat backbone P3
#    [-1, 3, C3, [256, False]],  # 17 (P3/8-small)
# 
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, 14], 1, Concat, [1]],  # cat head P4
#    [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)
# 
#    [-1, 1, Conv, [512, 3, 2]],
#    [[-1, 10], 1, Concat, [1]],  # cat head P5
#    [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)
# 
#    [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#   ]

!pip install wandb
!pip PyYAML-5.4.1
import wandb

# Commented out IPython magic to ensure Python compatibility.
# %cd yolov5/

# Commented out IPython magic to ensure Python compatibility.
# %%time
# !python train.py --img 640  --batch 4 --epochs 50 --data /content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml --cfg /content/drive/MyDrive/Kaggle/Tomato/yolov5/models/yolov5s.yaml --weight yolov5s.pt --name yolov5s_results

!python test.py --weights /content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5s_results2/weights/best.pt --data '/content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml' --img 640 --augment

!python detect.py --img-size 640  --conf 0.4 --source /content/drive/MyDrive/Kaggle/Tomato/Data/test/images --weights /content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5s_results2/weights/best.pt --augment

!python detect.py --img-size 640  --conf 0.4 --source /content/drive/MyDrive/Kaggle/Tomato/Tomato60fps.mp4 --weights /content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5s_results2/weights/best.pt --augment

./darknet detector demo .\data\obj_cl.data .\yolo-obj_cl.cfg .\backup_cl\yolo-obj_cl_best.weights .\video\zatoka2.MP4 -benchmark

"""# Yolov5m"""

# Commented out IPython magic to ensure Python compatibility.
# %cat yolov5/models/yolov5m.yaml

#customize iPython writefile so we can write variables
from IPython.core.magic import register_line_cell_magic

@register_line_cell_magic
def writetemplate(line, cell):
    with open(line, 'w') as f:
        f.write(cell.format(**globals()))

# Commented out IPython magic to ensure Python compatibility.
# %%writetemplate yolov5/models/yolov5m.yaml
# 
# # parameters
# nc: 1  # number of classes
# depth_multiple: 0.67  # model depth multiple
# width_multiple: 0.75  # layer channel multiple
# 
# # anchors
# anchors:
#   - [10,13, 16,30, 33,23]  # P3/8
#   - [30,61, 62,45, 59,119]  # P4/16
#   - [116,90, 156,198, 373,326]  # P5/32
# 
# # YOLOv5 backbone
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Focus, [64, 3]],  # 0-P1/2
#    [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#    [-1, 3, C3, [128]],
#    [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#    [-1, 9, C3, [256]],
#    [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#    [-1, 9, C3, [512]],
#    [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#    [-1, 1, SPP, [1024, [5, 9, 13]]],
#    [-1, 3, C3, [1024, False]],  # 9
#   ]
# 
# # YOLOv5 head
# head:
#   [[-1, 1, Conv, [512, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 6], 1, Concat, [1]],  # cat backbone P4
#    [-1, 3, C3, [512, False]],  # 13
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 4], 1, Concat, [1]],  # cat backbone P3
#    [-1, 3, C3, [256, False]],  # 17 (P3/8-small)
# 
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, 14], 1, Concat, [1]],  # cat head P4
#    [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)
# 
#    [-1, 1, Conv, [512, 3, 2]],
#    [[-1, 10], 1, Concat, [1]],  # cat head P5
#    [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)
# 
#    [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#   ]

# Commented out IPython magic to ensure Python compatibility.
# %%time
# !python train.py --img 640  --batch 4 --epochs 50 --data /content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml --cfg /content/drive/MyDrive/Kaggle/Tomato/yolov5/models/yolov5m.yaml --weight yolov5m.pt --name yolov5m_results

!python test.py --weights /content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5m_results2/weights/best.pt --data '/content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml' --img 640 --augment

"""# Yolov5l"""

# Commented out IPython magic to ensure Python compatibility.
# %cat ./models/yolov5l.yaml

#customize iPython writefile so we can write variables
from IPython.core.magic import register_line_cell_magic

@register_line_cell_magic
def writetemplate(line, cell):
    with open(line, 'w') as f:
        f.write(cell.format(**globals()))

# Commented out IPython magic to ensure Python compatibility.
# %%writetemplate ./models/yolov5l.yaml
# 
# # parameters
# nc: 1  # number of classes
# depth_multiple: 1.0  # model depth multiple
# width_multiple: 1.0  # layer channel multiple
# 
# # anchors
# anchors:
#   - [10,13, 16,30, 33,23]  # P3/8
#   - [30,61, 62,45, 59,119]  # P4/16
#   - [116,90, 156,198, 373,326]  # P5/32
# 
# # YOLOv5 backbone
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Focus, [64, 3]],  # 0-P1/2
#    [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#    [-1, 3, C3, [128]],
#    [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#    [-1, 9, C3, [256]],
#    [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#    [-1, 9, C3, [512]],
#    [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#    [-1, 1, SPP, [1024, [5, 9, 13]]],
#    [-1, 3, C3, [1024, False]],  # 9
#   ]
# 
# # YOLOv5 head
# head:
#   [[-1, 1, Conv, [512, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 6], 1, Concat, [1]],  # cat backbone P4
#    [-1, 3, C3, [512, False]],  # 13
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 4], 1, Concat, [1]],  # cat backbone P3
#    [-1, 3, C3, [256, False]],  # 17 (P3/8-small)
# 
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, 14], 1, Concat, [1]],  # cat head P4
#    [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)
# 
#    [-1, 1, Conv, [512, 3, 2]],
#    [[-1, 10], 1, Concat, [1]],  # cat head P5
#    [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)
# 
#    [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#   ]

# Commented out IPython magic to ensure Python compatibility.
# %%time
# !python train.py --img 640  --batch 4 --epochs 50 --data /content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml --cfg /content/drive/MyDrive/Kaggle/Tomato/yolov5/models/yolov5l.yaml --weight yolov5l.pt --name yolov5l_results

!python test.py --weights /content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5l_results/weights/best.pt --data '/content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml' --img 640 --augment

!kill 2110

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir '/content/drive/MyDrive/Kaggle/Tomato/yolov5/runs'

"""# Yolov5X"""

# Commented out IPython magic to ensure Python compatibility.
# %cat yolov5/models/yolov5x.yaml

#customize iPython writefile so we can write variables
from IPython.core.magic import register_line_cell_magic

@register_line_cell_magic
def writetemplate(line, cell):
    with open(line, 'w') as f:
        f.write(cell.format(**globals()))

# Commented out IPython magic to ensure Python compatibility.
# %%writetemplate /content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml
# 
# train: /content/drive/MyDrive/Kaggle/Tomato/Data/train
# val: /content/drive/MyDrive/Kaggle/Tomato/Data/valid
# nc: 1
# names: ['tomato']

# Commented out IPython magic to ensure Python compatibility.
# %%writetemplate yolov5/models/yolov5x.yaml
# 
# # parameters
# nc: 1  # number of classes
# depth_multiple: 1.33  # model depth multiple
# width_multiple: 1.25  # layer channel multiple
# 
# # anchors
# anchors:
#   - [10,13, 16,30, 33,23]  # P3/8
#   - [30,61, 62,45, 59,119]  # P4/16
#   - [116,90, 156,198, 373,326]  # P5/32
# 
# # YOLOv5 backbone
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Focus, [64, 3]],  # 0-P1/2
#    [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#    [-1, 3, C3, [128]],
#    [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#    [-1, 9, C3, [256]],
#    [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#    [-1, 9, C3, [512]],
#    [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#    [-1, 1, SPP, [1024, [5, 9, 13]]],
#    [-1, 3, C3, [1024, False]],  # 9
#   ]
# 
# # YOLOv5 head
# head:
#   [[-1, 1, Conv, [512, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 6], 1, Concat, [1]],  # cat backbone P4
#    [-1, 3, C3, [512, False]],  # 13
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 4], 1, Concat, [1]],  # cat backbone P3
#    [-1, 3, C3, [256, False]],  # 17 (P3/8-small)
# 
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, 14], 1, Concat, [1]],  # cat head P4
#    [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)
# 
#    [-1, 1, Conv, [512, 3, 2]],
#    [[-1, 10], 1, Concat, [1]],  # cat head P5
#    [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)
# 
#    [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#   ]

!pip install wandb
import wandb

# You should skip this line
# !wandb off

# Commented out IPython magic to ensure Python compatibility.
# %cd yolov5

# for check the widdth and height of all images
# import os
# from PIL import Image 

# folder_images = "/content/drive/MyDrive/Kaggle/Tomato/Data/train/images"
# size_images = dict()

# for dirpath, _, filenames in os.walk(folder_images):
#     for path_image in filenames:
#         image = os.path.abspath(os.path.join(dirpath, path_image))
#         with Image.open(image) as img:
#             width, heigth = img.size
#             size_images[path_image] = {'width': width, 'heigth': heigth}
# print(size_images)

# size_images[max(size_images)]



import torch
torch.cuda.empty_cache()

# Commented out IPython magic to ensure Python compatibility.
# %%time
# !python train.py --img 640  --batch 4 --epochs 50 --data /content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml --cfg /content/drive/MyDrive/Kaggle/Tomato/yolov5/models/yolov5x.yaml --weight yolov5x.pt --name yolov5x_results

# %load_ext tensorboard
# %tensorboard --logdir logs

# let's check the training result directory.
# Here model and result are saved
!ls -R /content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5x_results3

# Analize the training and validation result 

# Image('/content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5x_results3/labels_correlogram.jpg')

# Analize the training and validation result
from IPython.display import Image
Image('/content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5x_results3/results.png')

# Analize the Confusion matrix
Image('/content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5x_results3/confusion_matrix.png',width=400)

!python test.py --weights /content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5x_results3/weights/best.pt --data '/content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml' --img 640 --augment

#display inference on ALL test images
#this looks much better with longer training above

import glob
from IPython.display import Image, display

for imageName in glob.glob('/content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/test/exp2/*.jpg'): #assuming JPG
    display(Image(filename=imageName))
    print("\n")

"""Let's run detection on test images
Parameters to consider:

* img-size: define input image size
* conf: Minimum threshold of confidence
* source: Location of the image/video file
* weights: specify our trined weight file
* augment: Augmentation of the images during detection for better result
"""

!python detect.py --img-size 640  --conf 0.4 --source /content/drive/MyDrive/Kaggle/Tomato/Data/test/images --weights /content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5x_results3/weights/best.pt --augment

#display inference on ALL test images
#this looks much better with longer training above

import glob
from IPython.display import Image, display

for imageName in glob.glob('/content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/detect/exp5/*.png'): #assuming JPG
    display(Image(filename=imageName))
    print("\n")



# Data of hyper parameters
!ls ./data

# Commented out IPython magic to ensure Python compatibility.
# %cat ./data/hyp.finetune.yaml

# Commented out IPython magic to ensure Python compatibility.
# %%writetemplate ../Data/hyp.custom.yaml
# 
# lr0: 0.0032
# lrf: 0.12
# momentum: 0.843
# weight_decay: 0.00036
# warmup_epochs: 2.0
# warmup_momentum: 0.5
# warmup_bias_lr: 0.05
# box: 0.0296
# cls: 0.243
# cls_pw: 0.631
# obj: 0.301
# obj_pw: 0.911
# iou_t: 0.2
# anchor_t: 2.91
# # anchors: 3.63
# fl_gamma: 0.0
# hsv_h: 0.0138
# hsv_s: 0.664
# hsv_v: 0.464
# degrees: 0.373
# translate: 0.245
# scale: 0.898
# shear: 0.602
# perspective: 0.0
# flipud: 0.00856
# fliplr: 0.5
# mosaic: 1.0
# mixup: 0.243

"""Initialize the weights of previously trained model."""

# %%time
# !python train.py --img 640  --batch 4 --epochs 50 --data /content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml --cfg /content/drive/MyDrive/Kaggle/Tomato/yolov5/models/yolov5x.yaml --weight yolov5x.pt --name yolov5x_results

# Commented out IPython magic to ensure Python compatibility.
# %%time
# !python train.py --img 640  --batch 4 --epochs 50 --data ../Data/data.yaml --cfg /models/yolov5x.yaml --hyp ../Data/hyp.custom.yaml  --weights /content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5x_results3/weights/best.pt  --name FineTuned

# Analize the training and validation result
Image('/content/drive/MyDrive/Kaggle/Tomato/yolov5/runs/train/yolov5x_results3/results.png')

#YOLOv5s
!python test.py --weights ./runs/train/yolov5s_results2/weights/best.pt --data '/content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml' --img 640 --augment

!python detect.py --img-size 640  --conf 0.4 --source ../Data/test/images --weights ./runs/train/yolov5s_results2/weights/best.pt --augment

#YOLOv5m
!python test.py --weights ./runs/train/yolov5m_results2/weights/best.pt --data '/content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml' --img 640 --augment

!python detect.py --img-size 640  --conf 0.4 --source ../Data/test/images --weights ./runs/train/yolov5m_results2/weights/best.pt --augment

#YOLOv5l
!python test.py --weights ./runs/train/yolov5l_results/weights/best.pt --data '/content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml' --img 640 --augment

!python detect.py --img-size 640  --conf 0.4 --source ../Data/test/images --weights ./runs/train/yolov5l_results/weights/best.pt --augment

#YOLOv5x
!python test.py --weights ./runs/train/yolov5x_results3/weights/best.pt --data '/content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml' --img 640 --augment

!python detect.py --img-size 640  --conf 0.4 --source ../Data/test/images --weights ./runs/train/yolov5x_results3/weights/best.pt --augment

#YOLOv5x-FineTuned
!python test.py --weights ./runs/train/FineTuned2/weights/best.pt --data '/content/drive/MyDrive/Kaggle/Tomato/Data/data.yaml' --img 640 --augment

!python detect.py --img-size 640  --conf 0.4 --source ../Data/test/images --weights ./runs/train/FineTuned2//weights/best.pt --augment